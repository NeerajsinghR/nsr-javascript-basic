- What is JavaScript?

Javascript is a scripting language,where instuctions are written for runtime environment.
Javascript is easy to implement, no compilation require directly execute the instruction,object oriented language.
In javascript we can pass function as a value in variable.

Variable decalartion:

1. var a = 10;
2. var a; 
   a=10;
 
Primitive data type:

1. Number : in javascript number is double floating type number.
2. Sting : A character is a sting of lenght 1, there is no character type in javascript
3. Boolean : either true or false value.

Javascript is a losely coupled language. it is not dependent on type in the below example we can see
first we assign variable b number value then string so its working no error.

var b =10;
console.log(b);
b = "hello b";
console.log(b);

Output:-
10
hello b

4.Undefined variable : which variable we decalared by default it's value set undefined

var a; //undefined variable

5. NUll : if we assign any null value in variable then we called as null variable. 
--------

- "typeof" Operator: typeof used to find the type of vaiable or value.

e.g.:
console.log(typeof false);
 boolean

var a=10;
console.log(typeof a);
number
-----

- Type Coercion and "===" Operator

Type Coercion: In javascript automatically type conversion happend.

value of all type have associate boolean value
Always use "===" for precise checks (both value and type)

e.g. 123 + "4" (automatically convert 123 to string type("123") then concat with string "4"
   ouptut: 1234

   var a = undefined;
   if(a)
   console.log("a is true");
   else
   console.log("a is false");

   output: a is false

eg: "===" Operator used to restrict automatically type conversion for two variable.

var a= 10;
var b= 10;

//automatically type conversion
if(a==b)
console.log("both value are equal ==");

//strict to not using type conversion using === operator will return true if both have same type and same value
if(a===b)
console.log("both value are equal ===");
-------

Objects: Objects not dependent on particular class. It behave like map key and value.

Object literal notation to create object. e.g:- var obj = {};
New property can be added on object directly. e.g. : obj.city = "indore";
Object can have method also.

var obj = {};
console.log(obj);

obj.name = "neeraj";
obj.city = "indore";
console.log(obj);

output:
{}
{ name: 'neeraj', city: 'indore' }

- Dot : it is faster than [] bracket notation. but there are some case where we need to use [] bracket notation


[] Bracket Notations:- Uses of [] Notation

property name is reserved word or invalid identifier
property name start with number.

var obj = {
    "name" : "neeraj",
    "city" : "indore",
    "age"   : 20,
      2    : "TWO"
};

var firstName = "name";
console.log("properties not exits in obj",obj.firstName);
console.log("accessing using [] bracket ",obj[firstName]);

output: - 
properties not exits in obj undefined
accessing using [] bracket  neeraj

var obj = {
    "name" : "neeraj",
    "city" : "indore",
    "familydeatils" :  {
        "father" : "aa"
    }
};
obj.familydeatils.mother = "rr";
console.log(obj.familydeatils["mother"]);

delete : used to remove propery from object.

delete obj.city;
console.log(obj);

{ name: 'neeraj',
  familydeatils: { father: 'aa', mother: 'rr' }
----------

- Arrays : array is a object

var language = ["c","c++","java","python"];

console.log("language is",language)
console.log("language is",language.length)

language[4] = "js";
console.log("length is",language)
console.log("language is",language["4"])

output:-
language is [ 'c', 'c++', 'java', 'python' ]
length is 4
language is [ 'c', 'c++', 'java', 'python', 'js' ]
language is js

Wrapper object: In javacript there is some primitive type which is object also

String
Number
Boolean
Symbol
---

Method of Array:-

//splice method used where we need to reomove or delete element in array
// language.splice(0,2,1,2);
// language.splice(1,2)

//slice method used to 
// var sl = language.slice(2) //create new array from 2 index
//create new array from index 2 to 4
var sli = language.slice(2,4)
console.log("language is",sli)

//push for inseting new element in last postion and pop used for removing element.
language.push("new");
language.pop();
console.log("language is",language)

//shift() used to remove first index element in array.
var first = language.shift();
console.log("language is",first)
//unshift() used to add element in first index in array.
language.unshift("aa");

In forEach method function passed as argument.

// var language = ["c","c++","java","python",2,true,{}];
// var print = function(lang){
//     console.log("language is:- ",lang)
// }
// // forEach method 
// language.forEach(print)

--------

Function as argument:

var h = function hi(name){
    console.log("hi "+name);
}

function hiPrint(a, name){
    a(name);
    console.log("hiiii...");
}

hiPrint(h, "raj");

output:-
hi raj
hiiii...

function on Object: pass function on object

//function on Object
var obj ={
    a :20
};

obj.b= function(){
    return 10;
}

console.log(obj.b());
console.log(obj);

output:-
10
{ a: 20, b: [Function] }

this keyword: used where we don't depend on external function. we directly use this keyword for instance variable.

e.g:-

var person = {
    "firstName" : "Neeraj",
    "lastName" : "Rawat",
    "getFullName" : function(){
        return this.firstName + " " + this.lastName;
    },
    "address" :{
        "street" : "1 abc nagar",
        "city" : "Indore",
        "state" : "MP"
    },
    "isFromState" :  function(st){
       return (this.address.state===st)       
    }
};

// var fullName = person.getFullName();
// var person2 = person;
// person = {};
// console.log(person2.getFullName())

var flag = person2.isFromState("MaP")
console.log("state present:-",flag)

// Default function argument: argument value is not an array but it's look like array.

var add = function(){
    var sum =0;    
    for(var i= 0; i<arguments.length; i++)
    sum+=arguments[i];
    
    return sum;
}

console.log(add(10,32,12,53,2));

Math:

const numbers = [65, 44, 12, 4];
console.log(Math.max(...numbers))
console.log(Math.min(...numbers))


Date:-

const birthday = new Date('August 19, 1975 23:15:30');
const date1 = birthday.getMonth();
console.log(date1);

const event = new Date('August 19, 1975 23:15:30');
event.setDate(24);
console.log(event)
